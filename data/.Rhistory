summary(match_test)
match_full_ate_data <- match.data(match_test)
lm_full_ate <- lm(Y_obs ~ A + W1 + W2 + W3, data = match_full_ate_data, weights = weights)
lm_full_ate_summ <- summary(lm_full_ate)
lm_full_ate_summ
ATE_full <- lm_full_ate_summ$coefficients["A", "Estimate"]
ATE_full
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
head(ypsps)
test <- ypsps %>% mutate(college_random = as.numeric(rbernoulli(100)))
test <- ypsps %>% mutate(college_random = as.numeric(rbernoulli(1254)))
View(test)
test$college_random
dagify(Y ~ A,
Y ~ W1,
A ~ W1,
Y ~ U,
A ~ U,
W1 ~ U,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy"))
library(knitr)
library(dplyr)
library(ggplot2)
library(stringr)
library(purrr)
library(dagitty)
library(ggdag)
library(AER)
theme_set(theme_dag())
source("pretty_dag.R")
ex_dag1 <- dagify(Y ~ A,
W ~ Y,
W ~ A,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag()
ex_dag1 %>%
ggdag() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred","darkgrey", "navy"))
ex_dag1 %>% control_for(var = "W") %>%
ggdag_adjust() +
geom_dag_node(aes(color = adjusted)) +
geom_dag_text(col = "white")
dagify(Y ~ A,
Y ~ W1,
A ~ W1,
Y ~ U,
A ~ U,
W1 ~ U,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy"))
dagify(Y ~ A,
W1 ~ Y,
W1 ~ A,
Y ~ U_Y,
A ~ U_A,
W1 ~ U_W1,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy"))
dagify(Y ~ A,
W1 ~ Y,
W1 ~ A,
W2 ~ W1,
Y ~ W2,
Y ~ U_Y,
A ~ U_A,
W1 ~ U_W1,
W2 ~ U_W2,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy"))
dagify(Y ~ A,
Y ~ U,
Y ~ W,
W ~ U,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy"))
dagify(Y ~ A,
Y ~ U,
Y ~ W,
W ~ U,
A ~ U,
A ~ W,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy"))
dagify(Y ~ A,
Y ~ U,
Y ~ W,
W ~ U,
A ~ U,
A ~ W,
A ~ Z,
Z ~ U_Z,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag() %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy", "darkgreen"))
ex_dag2 <- dagify(Y ~ A,
Y ~ U_YA,
Y ~ W,
W ~ U_W,
A ~ U_YA,
A ~ W,
A ~ Z,
W ~ Z,
Z ~ U_Z,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag()
ex_dag2 %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy", "darkgreen"))
ex_dag4 <- dagify(Y ~ A,
Y ~ U_YA,
W ~ Y,
W ~ U_W,
A ~ U_YA,
A ~ W,
A ~ Z,
W ~ Z,
Z ~ U_Z,
exposure = "A",
outcome = "Y") %>%
tidy_dagitty() %>%
pretty_dag()
ex_dag4 %>%
ggdag() +
geom_dag_edges() +
geom_dag_node(aes(color = color)) +
geom_dag_text(col = "white") +
theme(legend.position = "none") +
scale_color_manual(values=c("darkred", "lightgrey", "darkgrey", "navy", "darkgreen"))
source('~/.active-rstudio-document', echo=TRUE)
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
setwd("~/Documents/Computational-Social-Science-Projects/CSS_Project-6_Team-6_Spring-2021")
# Load tidyverse and MatchIt
# Feel free to load other libraries as you wish
library(tidyverse)
library(MatchIt)
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
setwd("~/Documents/Computational-Social-Science-Projects/CSS_Project-6_Team-6_Spring-2021")
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
setwd("~/Documents/Computational-Social-Science-Projects/CSS_Project-6_Team-6_Spring-2021/data")
# Load ypsps data
ypsps <- read_csv('data/ypsps.csv')
# Load ypsps data
ypsps <- read_csv('ypsps.csv')
# Load ypsps data
ypsps <- read_csv('CSS_Project-6_Team-6_Spring-2021/data/ypsps.csv')
# Select covariates that represent the "true" model for selection, fit model
postTreat_var_indices <- 123:174
outcome_var_components <- c("student_vote", "student_meeting", "student_button",
"student_money",
"student_communicate", "student_demonstrate",
"student_community",
"student_other")
ypsps_preTreat <- ypsps %>% select(-postTreat_var_indices) %>%  select(-outcome_var_components)
#LL Note: just went w/ a list of 10 for now, but we can consider expanding it if we'd like!
true_covars <- c('student_PubAff', 'student_Newspaper', 'student_FamTalk',
'student_GovtOpinion', 'student_Govt4All',
'parent_Vote', 'parent_Rally', 'parent_PolClub',
'parent_CivicOrg', 'parent_HHInc')
#true_covars <- c('student_PubAff', 'student_Newspaper', 'student_Radio', 'student_TV',
#                 'student_Magazine', 'student_FamTalk', 'student_AdultTalk',
#                 "student_FrTalk", 'student_GovtOpinion', 'student_TrGovt',
#                 'student_GovtSmart',
#                 'student_Govt4All', 'student_Govern',
#                 'student_FDR', 'student_Knowledge', 'student_SchOfficer',
#                 'parent_Newspaper', 'parent_Radio', 'parent_TV', 'parent_Magazine',
#                 'parent_StrOpinion','parent_Vote', 'parent_Rally',
#                 'parent_OthAct', 'parent_PolClub', 'parent_Button', 'parent_Money',
#                 'parent_GovtOpinion', 'parent_TrGovt', 'parent_GovtSmart',
#                 "parent_Govt4All",
#                 'parent_CivicOrg', 'parent_CLOrg', 'parent_HHInc')
ypsps_true <- ypsps %>% select(true_covars, college, student_ppnscal) %>% drop_na()
#create formula to pass into matchIt function
ps_formula <- as.formula(
paste("college", paste(true_covars, collapse = " + "), sep = " ~ ")
)
#nearest-neighbor matching
match_out_NN <- matchit(ps_formula, data = ypsps_true, method = 'nearest', estimand = 'ATT')
NN_summary <- summary(match_out_NN)
NN_summary
#fit data and estimate ATT
match_data_NN <- match.data(match_out_NN)
lm_formula <- as.formula(
paste("student_ppnscal",  paste('college +', paste(true_covars, collapse = " + ")),
sep = " ~ ")
)
fit_NN <- lm(lm_formula, data = match_data_NN, weights = weights)
summary(fit_NN)
# Plot the balance for the top 10 covariates
# <- data.frame(NN_summary$sum.matched)
#NN_df <- tibble::rownames_to_column(NN_df, "covars")
#NN_df <- NN_df %>% mutate(abs_mean_diff = abs(NN_df$Std..Mean.Diff.))
#arrange(NN_df, abs_mean_diff)
plot(summary(match_out_NN), var.order = 'unmatched', threshold = .1)
# Report the overall balance and the proportion of covariates that meet the balance threshold
?matchit
#but haven't been able to debug yet
ATT <- c()
percent_improvement <- c()
beats_threshold <- c()
treatment = 'college'
outcome = "student_ppnscal"
number_of_covars <- sample(1:ncol(df_covars), 1)
# Remove treatment and interview ID from the pre-treatment variable dataframe and remove NAs
df_covars <- ypsps_preTreat %>% select(-c("interviewid", 'student_ppnscal', 'college')) %>%  drop_na()
#Remove NAs from pre-treatment variable dataframe
all_data <-ypsps_preTreat %>% drop_na()
number_of_covars <- sample(1:ncol(df_covars), 1)
#print(paste("covar number:", number_of_covars))
vars_index <- sample(1:ncol(df_covars), number_of_covars)
#print(paste("vars index:", vars_index))
sample_covars <- df_covars %>% select(vars_index)
#print(paste("samplecols:", ncol(sample_covars)))
covar_names <- colnames(sample_covars)
ps_formula <- as.formula(
paste(treatment, paste(covar_names, collapse = " + "), sep = " ~ "))
ps_formula
match_out_mahal_cem <- matchit(ps_formula, data = all_data, method = 'cem', distance = 'mahalanobis',
estimand = 'ATT')
match_out_mahal_cem <- matchit(ps_formula, data = all_data, method = 'exact', distance = 'mahalanobis',
estimand = 'ATT')
match_out_mahal_cem <- matchit(ps_formula, data = all_data, method = 'optimal', distance = 'mahalanobis',
estimand = 'ATT')
match_out_mahal_cem <- matchit(ps_formula, data = all_data, method = 'genetic', distance = 'mahalanobis',
estimand = 'ATT')
match_out_mahal_cem <- matchit(ps_formula, data = all_data, method = 'full', distance = 'mahalanobis',
estimand = 'ATT')
full_summary <- summary(match_out_mahal_full)
match_out_mahal_full <- matchit(ps_formula, data = all_data, method = 'full', distance = 'mahalanobis',
estimand = 'ATT')
full_summary <- summary(match_out_mahal_full)
full_summary
#calculate ATT
match_data_mahal <- match.data(match_out_mahal_full)
lm_formula <- as.formula(
paste(outcome,  paste(treatment, paste(covar_names, collapse = " + "), sep = " + "),
sep = " ~ "))
fit_mahal <- lm(lm_formula, data = match_data_mahal, weights = weights)
lm_mahal <- summary(fit_mahal)
ATT_mahal <- lm_mahal$coefficients[treatment, "Estimate"]
ATT <- append(ATT, ATT_mahal)
#calculate mean percent improvement
reduction_df <- as.data.frame.matrix(full_summary$reduction)
reduction_mean <- mean(reduction_df$`Std. Mean Diff.`)
percent_improvement <- append(percent_improvement, reduction_mean)
#calculate proportion that passed 0.1 threshold
thresh_count = 0
matched_df <- as.data.frame.matrix(full_summary$sum.matched)
for(val in matched_df$`Std. Mean Diff.`){
if(abs(val) <= 0.1){
thresh_count <- thresh_count + 1}
}
thresh_prop <- (thresh_count / nrow(matched_df))*100
beats_threshold <- append(beats_threshold, thresh_prop)
for(sim in 1:n_sims){
number_of_covars <- sample(1:ncol(df_covars), 1)
#print(paste("covar number:", number_of_covars))
vars_index <- sample(1:ncol(df_covars), number_of_covars)
#print(paste("vars index:", vars_index))
sample_covars <- df_covars %>% select(vars_index)
#print(paste("samplecols:", ncol(sample_covars)))
covar_names <- colnames(sample_covars)
ps_formula <- as.formula(
paste(treatment, paste(covar_names, collapse = " + "), sep = " ~ "))
match_out_mahal_full <- matchit(ps_formula, data = all_data, method = 'full', distance = 'mahalanobis',
estimand = 'ATT')
full_summary <- summary(match_out_mahal_full)
#calculate ATT
match_data_mahal <- match.data(match_out_mahal_full)
lm_formula <- as.formula(
paste(outcome,  paste(treatment, paste(covar_names, collapse = " + "), sep = " + "),
sep = " ~ "))
fit_mahal <- lm(lm_formula, data = match_data_mahal, weights = weights)
lm_mahal <- summary(fit_mahal)
ATT_mahal <- lm_mahal$coefficients[treatment, "Estimate"]
ATT <- append(ATT, ATT_mahal)
#calculate mean percent improvement
reduction_df <- as.data.frame.matrix(full_summary$reduction)
reduction_mean <- mean(reduction_df$`Std. Mean Diff.`)
percent_improvement <- append(percent_improvement, reduction_mean)
#calculate proportion that passed 0.1 threshold
thresh_count = 0
matched_df <- as.data.frame.matrix(full_summary$sum.matched)
for(val in matched_df$`Std. Mean Diff.`){
if(abs(val) <= 0.1){
thresh_count <- thresh_count + 1}
}
thresh_prop <- (thresh_count / nrow(matched_df))*100
beats_threshold <- append(beats_threshold, thresh_prop)
}
n_sims <- 1000 #LL note on 3/29: just doing 1000 for now because it always breaks at some point at 10k
for(sim in 1:n_sims){
number_of_covars <- sample(1:ncol(df_covars), 1)
#print(paste("covar number:", number_of_covars))
vars_index <- sample(1:ncol(df_covars), number_of_covars)
#print(paste("vars index:", vars_index))
sample_covars <- df_covars %>% select(vars_index)
#print(paste("samplecols:", ncol(sample_covars)))
covar_names <- colnames(sample_covars)
ps_formula <- as.formula(
paste(treatment, paste(covar_names, collapse = " + "), sep = " ~ "))
match_out_mahal_full <- matchit(ps_formula, data = all_data, method = 'full', distance = 'mahalanobis',
estimand = 'ATT')
full_summary <- summary(match_out_mahal_full)
#calculate ATT
match_data_mahal <- match.data(match_out_mahal_full)
lm_formula <- as.formula(
paste(outcome,  paste(treatment, paste(covar_names, collapse = " + "), sep = " + "),
sep = " ~ "))
fit_mahal <- lm(lm_formula, data = match_data_mahal, weights = weights)
lm_mahal <- summary(fit_mahal)
ATT_mahal <- lm_mahal$coefficients[treatment, "Estimate"]
ATT <- append(ATT, ATT_mahal)
#calculate mean percent improvement
reduction_df <- as.data.frame.matrix(full_summary$reduction)
reduction_mean <- mean(reduction_df$`Std. Mean Diff.`)
percent_improvement <- append(percent_improvement, reduction_mean)
#calculate proportion that passed 0.1 threshold
thresh_count = 0
matched_df <- as.data.frame.matrix(full_summary$sum.matched)
for(val in matched_df$`Std. Mean Diff.`){
if(abs(val) <= 0.1){
thresh_count <- thresh_count + 1}
}
thresh_prop <- (thresh_count / nrow(matched_df))*100
beats_threshold <- append(beats_threshold, thresh_prop)
}
set.seed(24)
#but haven't been able to debug yet
ATT <- c()
percent_improvement <- c()
beats_threshold <- c()
treatment = 'college'
outcome = "student_ppnscal"
for(sim in 1:n_sims){
number_of_covars <- sample(1:ncol(df_covars), 1)
#print(paste("covar number:", number_of_covars))
vars_index <- sample(1:ncol(df_covars), number_of_covars)
#print(paste("vars index:", vars_index))
sample_covars <- df_covars %>% select(vars_index)
#print(paste("samplecols:", ncol(sample_covars)))
covar_names <- colnames(sample_covars)
ps_formula <- as.formula(
paste(treatment, paste(covar_names, collapse = " + "), sep = " ~ "))
match_out_mahal_full <- matchit(ps_formula, data = all_data, method = 'full', distance = 'mahalanobis',
estimand = 'ATT')
full_summary <- summary(match_out_mahal_full)
#calculate ATT
match_data_mahal <- match.data(match_out_mahal_full)
lm_formula <- as.formula(
paste(outcome,  paste(treatment, paste(covar_names, collapse = " + "), sep = " + "),
sep = " ~ "))
fit_mahal <- lm(lm_formula, data = match_data_mahal, weights = weights)
lm_mahal <- summary(fit_mahal)
ATT_mahal <- lm_mahal$coefficients[treatment, "Estimate"]
ATT <- append(ATT, ATT_mahal)
#calculate mean percent improvement
reduction_df <- as.data.frame.matrix(full_summary$reduction)
reduction_mean <- mean(reduction_df$`Std. Mean Diff.`)
percent_improvement <- append(percent_improvement, reduction_mean)
#calculate proportion that passed 0.1 threshold
thresh_count = 0
matched_df <- as.data.frame.matrix(full_summary$sum.matched)
for(val in matched_df$`Std. Mean Diff.`){
if(abs(val) <= 0.1){
thresh_count <- thresh_count + 1}
}
thresh_prop <- (thresh_count / nrow(matched_df))*100
beats_threshold <- append(beats_threshold, thresh_prop)
}
# Generate a vector that randomly assigns each unit to treatment/control
n = nrow(ypsps)
ypsps <- ypsps %>%
mutate(college_random = as.numeric(rbernoulli(n, p=0.5)))
# Generate a vector that randomly assigns each unit to treatment/control
n = nrow(ypsps)
ypsps <- ypsps %>%
mutate(college_random = as.numeric(rbernoulli(n, p=0.5)))
# Choose a baseline covariate (use dplyr for this)
head(ypsps$student_Gen, 10)
# Visualize the distribution by treatment/control (ggplot)
ggplot(ypsps, aes(x = student_Gen, fill = factor(college_random))) +
geom_bar() +
facet_grid(college_random~.) +
labs(title = "Distribution of Gender among College Attendees vs Non-College Attendees", fill = "college_random\n")
# Select covariates that represent the "true" model for selection, fit model
postTreat_var_indices <- 123:174
outcome_var_components <- c("student_vote", "student_meeting", "student_button",
"student_money",
"student_communicate", "student_demonstrate",
"student_community",
"student_other")
ypsps_preTreat <- ypsps %>% select(-postTreat_var_indices) %>%  select(-outcome_var_components)
#LL Note: just went w/ a list of 10 for now, but we can consider expanding it if we'd like!
true_covars <- c('student_PubAff', 'student_Newspaper', 'student_FamTalk',
'student_GovtOpinion', 'student_Govt4All',
'parent_Vote', 'parent_Rally', 'parent_PolClub',
'parent_CivicOrg', 'parent_HHInc')
#true_covars <- c('student_PubAff', 'student_Newspaper', 'student_Radio', 'student_TV',
#                 'student_Magazine', 'student_FamTalk', 'student_AdultTalk',
#                 "student_FrTalk", 'student_GovtOpinion', 'student_TrGovt',
#                 'student_GovtSmart',
#                 'student_Govt4All', 'student_Govern',
#                 'student_FDR', 'student_Knowledge', 'student_SchOfficer',
#                 'parent_Newspaper', 'parent_Radio', 'parent_TV', 'parent_Magazine',
#                 'parent_StrOpinion','parent_Vote', 'parent_Rally',
#                 'parent_OthAct', 'parent_PolClub', 'parent_Button', 'parent_Money',
#                 'parent_GovtOpinion', 'parent_TrGovt', 'parent_GovtSmart',
#                 "parent_Govt4All",
#                 'parent_CivicOrg', 'parent_CLOrg', 'parent_HHInc')
ypsps_true <- ypsps %>% select(true_covars, college, student_ppnscal) %>% drop_na()
#create formula to pass into matchIt function
ps_formula <- as.formula(
paste("college", paste(true_covars, collapse = " + "), sep = " ~ ")
)
#nearest-neighbor matching
match_out_NN <- matchit(ps_formula, data = ypsps_true, method = 'nearest', estimand = 'ATT')
NN_summary <- summary(match_out_NN)
NN_summary
#fit data and estimate ATT
match_data_NN <- match.data(match_out_NN)
lm_formula <- as.formula(
paste("student_ppnscal",  paste('college +', paste(true_covars, collapse = " + ")),
sep = " ~ ")
)
fit_NN <- lm(lm_formula, data = match_data_NN, weights = weights)
summary(fit_NN)
# Plot the balance for the top 10 covariates
# <- data.frame(NN_summary$sum.matched)
#NN_df <- tibble::rownames_to_column(NN_df, "covars")
#NN_df <- NN_df %>% mutate(abs_mean_diff = abs(NN_df$Std..Mean.Diff.))
#arrange(NN_df, abs_mean_diff)
plot(summary(match_out_NN), var.order = 'unmatched', threshold = .1)
# Report the overall balance and the proportion of covariates that meet the balance threshold
